{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["bUz7IKn4XYTW","Oxp0251EcETd","Mj3L_ff_XRe2","50Rnu02WZM7q","bTG-kARebahR","2G8ZedPds1Eg"],"mount_file_id":"19o-AVyPRPw-YlNYHREEPToC5zHyI4Cep","authorship_tag":"ABX9TyPhm2WQH2QXwa+s5YlOuUJY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Biblioteca"],"metadata":{"id":"bUz7IKn4XYTW"}},{"cell_type":"markdown","source":["Importar las bibliotecas necesarias para la lectura del archivo .rio"],"metadata":{"id":"iN65W5bXW3yB"}},{"cell_type":"code","execution_count":54,"metadata":{"id":"K_ZlQIo4Wk2t","executionInfo":{"status":"ok","timestamp":1680127000763,"user_tz":300,"elapsed":240,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from numpy import genfromtxt\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","source":["## Datos "],"metadata":{"id":"Oxp0251EcETd"}},{"cell_type":"code","source":["!pip install comtrade ## Se instala la biblioteca "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dl39l9MfcH35","executionInfo":{"status":"ok","timestamp":1680127005519,"user_tz":300,"elapsed":4566,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}},"outputId":"3c0761eb-0656-4a01-b655-05e8e74a1ff5"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: comtrade in /usr/local/lib/python3.9/dist-packages (0.0.10)\n"]}]},{"cell_type":"code","source":["from comtrade import Comtrade ## Carga y lectura del formato Comtrade"],"metadata":{"id":"AtsC-ljVcTVI","executionInfo":{"status":"ok","timestamp":1680127005519,"user_tz":300,"elapsed":7,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["rec = Comtrade() ## Se define la función Comtrade()\n","rec.load(r'/content/drive/MyDrive/Análisis de eventos /2021FEB/20210209 034216 BL1NOR-PUR PP2.cfg',encoding = \"ISO-8859-1\")## Cargamos la ubicación del archivo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIj7GlKOcYP9","executionInfo":{"status":"ok","timestamp":1680127005853,"user_tz":300,"elapsed":339,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}},"outputId":"24d25318-73e0-4067-97e2-9ada858672b8"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/comtrade.py:397: Warning: Unknown standard revision \"1997\"\n","  warnings.warn(Warning(msg))\n"]}]},{"cell_type":"code","source":["time = pd.DataFrame(rec.time, columns =['t'])\n","data = pd.DataFrame(data = np.transpose(rec.analog),columns = rec.analog_channel_ids )\n","data = pd.concat([time,data],axis=1)"],"metadata":{"id":"Iv_rperichGk","executionInfo":{"status":"ok","timestamp":1680127005854,"user_tz":300,"elapsed":27,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"gM6Ptm24cmuQ","executionInfo":{"status":"ok","timestamp":1680127005854,"user_tz":300,"elapsed":26,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}},"outputId":"70fcae78-2620-45ee-adaa-a0e1771f6bb0"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          t        iA        iB        iC        iN         vA         vB  \\\n","0  0.000000  0.516096 -0.299520 -0.198144 -0.018432 -94.528679  57.490795   \n","1  0.000833  0.493056 -0.147456 -0.331776 -0.009216 -94.896606  31.632202   \n","2  0.001667  0.428544  0.009216 -0.437760 -0.004608 -84.283356   2.594350   \n","3  0.002500  0.327168  0.170496 -0.502272  0.000000 -64.707809 -27.151052   \n","4  0.003333  0.188928  0.308736 -0.502272  0.004608 -40.151104 -54.688896   \n","\n","          vC      vSYN2  \n","0  36.471844  98.689072  \n","1  62.292702  56.132301  \n","2  81.330513   5.745306  \n","3  92.745651 -46.217167  \n","4  96.481522 -93.264526  "],"text/html":["\n","  <div id=\"df-d75924c2-3121-41b4-8800-6d0c4cfc3bf7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>t</th>\n","      <th>iA</th>\n","      <th>iB</th>\n","      <th>iC</th>\n","      <th>iN</th>\n","      <th>vA</th>\n","      <th>vB</th>\n","      <th>vC</th>\n","      <th>vSYN2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","      <td>0.516096</td>\n","      <td>-0.299520</td>\n","      <td>-0.198144</td>\n","      <td>-0.018432</td>\n","      <td>-94.528679</td>\n","      <td>57.490795</td>\n","      <td>36.471844</td>\n","      <td>98.689072</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000833</td>\n","      <td>0.493056</td>\n","      <td>-0.147456</td>\n","      <td>-0.331776</td>\n","      <td>-0.009216</td>\n","      <td>-94.896606</td>\n","      <td>31.632202</td>\n","      <td>62.292702</td>\n","      <td>56.132301</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.001667</td>\n","      <td>0.428544</td>\n","      <td>0.009216</td>\n","      <td>-0.437760</td>\n","      <td>-0.004608</td>\n","      <td>-84.283356</td>\n","      <td>2.594350</td>\n","      <td>81.330513</td>\n","      <td>5.745306</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.002500</td>\n","      <td>0.327168</td>\n","      <td>0.170496</td>\n","      <td>-0.502272</td>\n","      <td>0.000000</td>\n","      <td>-64.707809</td>\n","      <td>-27.151052</td>\n","      <td>92.745651</td>\n","      <td>-46.217167</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.003333</td>\n","      <td>0.188928</td>\n","      <td>0.308736</td>\n","      <td>-0.502272</td>\n","      <td>0.004608</td>\n","      <td>-40.151104</td>\n","      <td>-54.688896</td>\n","      <td>96.481522</td>\n","      <td>-93.264526</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d75924c2-3121-41b4-8800-6d0c4cfc3bf7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d75924c2-3121-41b4-8800-6d0c4cfc3bf7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d75924c2-3121-41b4-8800-6d0c4cfc3bf7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":59}]},{"cell_type":"markdown","source":["## Funciones necesarias para el procesamiento "],"metadata":{"id":"Mj3L_ff_XRe2"}},{"cell_type":"markdown","source":["Se definen cuatro funciones, la primera denominada ***eliminar_espacios(x)*** permite eliminar los espacios al inicio y al final de cada string, la segunda ***line_search(x)*** permite buscar las cuatro primeras letras de cada linea del archivo .txt, esto con el fin de encontrar la palabra LINE o LABEL, la tercera función permite dividir cada palabra del renglon y convertirlo en una lista, por ultimo la ultima función ***index_list()*** cumple con el objetivo de buscar palabras en especifico en un texto "],"metadata":{"id":"fB99M-2PXwOc"}},{"cell_type":"code","source":["def eliminar_espacios(x):\n","      bla = x.strip()\n","      return bla"],"metadata":{"id":"nYEfMVH9XdCN","executionInfo":{"status":"ok","timestamp":1680127005855,"user_tz":300,"elapsed":24,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["def line_search(x,n):\n","    m = x[0:n]\n","    return m"],"metadata":{"id":"JvoImIsdXjt1","executionInfo":{"status":"ok","timestamp":1680127005856,"user_tz":300,"elapsed":24,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["def delimitar_espacios(x):\n","      bla = x.split()\n","      return bla"],"metadata":{"id":"7d9-S-zhXlP9","executionInfo":{"status":"ok","timestamp":1680127005857,"user_tz":300,"elapsed":25,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["def index_list(lista, elemento):\n","\n","    posiciones = []  # nuestra lista para guardar las posiciones\n","    posicion = -1  # empezaremos a buscar en posicion + 1 (que es 0 inicialmente)\n","\n","    try:\n","        while True:\n","            # buscamos empezando a buscar desde la última posición encontrada\n","            posicion = lista.index(elemento, posicion + 1)\n","            posiciones.append(posicion)\n","    except:\n","        pass  # no hacemos nada si index lanza ValueError\n","\n","    return posiciones "],"metadata":{"id":"PTIDLDvpXvGX","executionInfo":{"status":"ok","timestamp":1680127005857,"user_tz":300,"elapsed":25,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":63,"outputs":[]},{"cell_type":"markdown","source":["### Función para la carga "],"metadata":{"id":"nw8_mSV9YFib"}},{"cell_type":"markdown","source":["La función numerico, recibe un dataFrame que por medio de un ciclo for recorre las filas de dicho DataFrame, esta función cumple el objetivo de ubicar las lineas donde hay numeros "],"metadata":{"id":"NhLByTQWL5QU"}},{"cell_type":"code","source":["def numerico(df):\n","    r,c = df.shape\n","    busqueda_esp = np.vectorize(line_search)\n","    for i in range(c):\n","      df.iloc[:,i] = busqueda_esp(df.iloc[:,i],4)\n","      df.iloc[:,i]= pd.to_numeric(df.iloc[:,i],errors = 'coerce')\n","    return df"],"metadata":{"id":"FbscFRNMcSTN","executionInfo":{"status":"ok","timestamp":1680127005858,"user_tz":300,"elapsed":24,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":["La función encoding, permite la lectura del archivo .txt, dependiendo de la marca que especifique"],"metadata":{"id":"eAxNSv93Lawx"}},{"cell_type":"code","source":["def encoding(marca):\n","\n","      if marca == 'siemens':\n","                            encoding = \"ISO-8859-1\"\n","      elif marca == 'abb':\n","                          encoding = None\n","      elif marca == 'ametek':\n","                          encoding = None           \n","      elif marca == 'GE Reason':\n","                          encoding = None\n","      else:\n","        print('Syntax error in marca= ')\n","\n","      return encoding"],"metadata":{"id":"ScIho_DOYsJy","executionInfo":{"status":"ok","timestamp":1680127005859,"user_tz":300,"elapsed":24,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":65,"outputs":[]},{"cell_type":"markdown","source":["recibe el DataFrame, que contiene las zonas especificas del relé, con el fin de quitar las celdas donde no hay valores numericos "],"metadata":{"id":"OgUsPOooM1tP"}},{"cell_type":"code","source":["def zonas_key(zonas):\n","    for key in zonas:\n","      z = pd.DataFrame(zonas[key]).dropna()\n","      z = numerico(z)\n","      zonas[key] = z\n","      zonas[key] = zonas[key].dropna(axis = 1)\n","\n","    return zonas"],"metadata":{"id":"txg7h3codMBa","executionInfo":{"status":"ok","timestamp":1680127005860,"user_tz":300,"elapsed":24,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":66,"outputs":[]},{"cell_type":"markdown","source":["La grafica tiene dos posibilidades, la primera es que el punto de incicio se repita y la srgunda es que la trayectoria no finalice en el punto de inicio, con este fin se realiza una función if-else, que nos permite determinar si el .rio analizado tiene o no, la trayectoria completa, en caso de que no sea el caso, se completa con los vectores a y b"],"metadata":{"id":"1nvGkSBgNG14"}},{"cell_type":"code","source":["def grafica_zonas(zonas, compl):\n","\n","    for key in zonas:\n","        ## Finaliza en el mismo punto donde inicia \n","        a = (np.array(zonas[key][1])).tolist()\n","        a.append(zonas[key][1].iloc[0])\n","\n","        ## Finaliza en el mismo punto donde inicia \n","        b = (np.array(zonas[key][2])).tolist()\n","        b.append(zonas[key][2].iloc[0])\n","        \n","        if (a.count(zonas[key][1].loc[0])) > 2: \n","            plt.plot(zonas[key][1],zonas[key][2],marker =\"o\",label = key)\n","\n","        else: \n","            plt.plot(a,b,marker =\"o\",label = key)\n","\n","    plt.plot(compl.real ,compl.imag,\"#A5D5D6\")\n","    plt.xlim(-100,100)\n","    plt.ylim(-100,100)\n","    plt.legend(loc='upper right', bbox_to_anchor=(0.5, 0.5))\n","    plt.show()"],"metadata":{"id":"GQNHWEaZdkH5","executionInfo":{"status":"ok","timestamp":1680129401138,"user_tz":300,"elapsed":215,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":82,"outputs":[]},{"cell_type":"code","source":["def grafica_impedance(link, marca,compl):\n","  dco = encoding(marca)\n","  rio_load = open(link ,encoding = dco)\n","  rio = rio_load.read().splitlines()\n","  fun_eliminar_espacios = np.vectorize(eliminar_espacios)\n","  rio = list(fun_eliminar_espacios(rio))\n","\n","  ## Zonas de protección \n","  start = index_list(rio, 'BEGIN ZONE')\n","  end = index_list(rio, 'END ZONE')\n","\n","  zonas_proteccion = zonas(rio,start,end)\n","  zonas_proteccion = zonas_key(zonas_proteccion)\n","  grafica_zonas(zonas_proteccion, compl)\n","\n","\n","  return rio "],"metadata":{"id":"_f-03_RCYK7M","executionInfo":{"status":"ok","timestamp":1680127005864,"user_tz":300,"elapsed":27,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":68,"outputs":[]},{"cell_type":"code","source":["def zonas(rio,start_zone,end_zone):\n","    zonas = {}\n","    len(start_zone)\n","    busqueda_esp = np.vectorize(line_search)\n","    for k in range(len(start_zone)):\n","        z_n = rio[start_zone[k]:(end_zone[k]+1)]\n","        lin = list(busqueda_esp(z_n,4))\n","        line_z1 = index_list(lin, 'LINE')\n","        name = list([index_list(lin, ('NAME')), index_list(lin, ('LABE'))])\n","        name.remove([])\n","        name = name[0]\n","        name = int(name[0])\n","        name_zone = z_n[name]\n","        line = z_n[line_z1[0]:(line_z1[-1]+1)]\n","        line_df = [delimitar_espacios(k) for k in line]\n","        zonas[name_zone] = line_df\n","    return zonas"],"metadata":{"id":"oveji0otbIaq","executionInfo":{"status":"ok","timestamp":1680127005865,"user_tz":300,"elapsed":27,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":69,"outputs":[]},{"cell_type":"markdown","source":["## links de prueba"],"metadata":{"id":"50Rnu02WZM7q"}},{"cell_type":"code","source":["pp2 = r'/content/drive/MyDrive/Análisis de eventos /2021FEB/20210209 034216 BL1NOR-PUR PP2.rio'\n","pp1 = r'/content/drive/MyDrive/Análisis de eventos /2021FEB/20210209 034217 BL1NOR-PUR PP1.RIO'"],"metadata":{"id":"kl8oNFxNZGny","executionInfo":{"status":"ok","timestamp":1680127005865,"user_tz":300,"elapsed":27,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":70,"outputs":[]},{"cell_type":"markdown","source":["## Función fasor "],"metadata":{"id":"bTG-kARebahR"}},{"cell_type":"code","source":["def vector_f(vector,t_vector):\n","  fm = (vector.index[t_vector<=(1/60)]).max() + 1 ## numero de muestras antes de cumplir un periodo, se toma el maximo para saber cuantas muestras hay por periodo, +1 puesto que python tiene en cuenta el 0\n","  vector_fasor = list(np.arange(0,len(vector),fm)) ## Se realiza un vector de 0 a el tamaño de la señal en paso del numero de muestras por periodo  \n","  tm = t_vector[vector_fasor] ## Los puntos del tiempo donde inician los periodos \n","  return vector_fasor, tm"],"metadata":{"id":"DyWWppq6bx3o","executionInfo":{"status":"ok","timestamp":1680127005866,"user_tz":300,"elapsed":27,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["def rms_ve(abs_vector):\n","    rms_vector = abs_vector/np.sqrt(2)\n","    return rms_vector"],"metadata":{"id":"G7fPmj3VdTZr","executionInfo":{"status":"ok","timestamp":1680127005867,"user_tz":300,"elapsed":27,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["def fft_mag(vector,t_vector): \n","    vector_fasor,tm = vector_f(vector, t_vector)     \n","    abs_vector=[]\n","    ang_vector=[]\n","    j = 0\n","    for i in vector_fasor:\n","\n","      if (i < vector_fasor[len(vector_fasor)-1]):\n","        N = len(vector[vector_fasor[j]:(vector_fasor[j+1])])\n","        vector_fft = np.fft.fft(vector[vector_fasor[j]:(vector_fasor[j+1])])*2/(N)\n","        vector_fft_cmplx = sum(vector_fft[1:10])\n","        ang_fft = np.angle(vector_fft[1])\n","        vector_fft = sum(abs(vector_fft[1:10])) \n","\n","      else:\n","        N = len(vector[j:])\n","        vector_fft = np.fft.fft(vector[j:])*2/(N)\n","        vector_fft_cmplx = sum(vector_fft[1:10]) \n","        ang_fft = np.angle(vector_fft[1])\n","        vector_fft = sum(abs(vector_fft[1:10]))\n","      j=j+1\n","\n","      abs_vector.append(vector_fft)\n","      ang_vector.append(ang_fft)\n","\n","    return abs_vector,ang_vector,tm"],"metadata":{"id":"c9SS5OArbZ98","executionInfo":{"status":"ok","timestamp":1680127005867,"user_tz":300,"elapsed":26,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["## Corriente\n","abs_iA,angle_iA,tm = fft_mag(data.iA, data.t)\n","abs_iB,angle_iB,tm = fft_mag(data.iB, data.t)\n","abs_iC,angle_iC,tm = fft_mag(data.iC, data.t)\n","\n","## Voltaje\n","abs_vA,angle_vA,tm = fft_mag(data.vA, data.t)\n","abs_vB,angle_vB,tm = fft_mag(data.vB, data.t)\n","abs_vC,angle_vC,tm = fft_mag(data.vC, data.t)"],"metadata":{"id":"CbIRJqehbt4J","executionInfo":{"status":"ok","timestamp":1680127006519,"user_tz":300,"elapsed":677,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":74,"outputs":[]},{"cell_type":"code","source":["## rms \n","abs_iA = rms_ve(abs_iA)\n","abs_iB = rms_ve(abs_iB)\n","abs_iC = rms_ve(abs_iC)\n","## rms voltaje \n","abs_vA = rms_ve(abs_vA)\n","abs_vB = rms_ve(abs_vB)\n","abs_vC = rms_ve(abs_vC)"],"metadata":{"id":"vRdgqPPle6O_","executionInfo":{"status":"ok","timestamp":1680127006520,"user_tz":300,"elapsed":9,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":75,"outputs":[]},{"cell_type":"markdown","source":["## Función numeros complejos"],"metadata":{"id":"2G8ZedPds1Eg"}},{"cell_type":"code","source":["import cmath\n","vectorized_polar = np.vectorize(cmath.rect)"],"metadata":{"id":"GBRnTfu_svqw","executionInfo":{"status":"ok","timestamp":1680127006521,"user_tz":300,"elapsed":9,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["## corriente en complejos rectangulares \n","ia_complex = vectorized_polar(abs_iA,angle_iA)\n","ib_complex = vectorized_polar(abs_iB,angle_iB)\n","ic_complex = vectorized_polar(abs_iC,angle_iC)\n","## voltaje en complejos rectangulares \n","va_complex = vectorized_polar(abs_vA,angle_vA)\n","vb_complex = vectorized_polar(abs_vB,angle_vB)\n","vc_complex = vectorized_polar(abs_vC,angle_vC)"],"metadata":{"id":"slnUOneRsyts","executionInfo":{"status":"ok","timestamp":1680127006522,"user_tz":300,"elapsed":9,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["## Impedancia por fase\n","\n","za = va_complex/ia_complex\n","zb = vb_complex/ib_complex\n","zc = vc_complex/ic_complex"],"metadata":{"id":"A6fhQx0mwwLR","executionInfo":{"status":"ok","timestamp":1680127006523,"user_tz":300,"elapsed":9,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}}},"execution_count":78,"outputs":[]},{"cell_type":"markdown","source":["## Prueba final archivo.rio"],"metadata":{"id":"998zJeMkZYs5"}},{"cell_type":"markdown","source":["## Función grafica zonas de protección "],"metadata":{"id":"ILjnHa01twQg"}},{"cell_type":"code","source":["rio = grafica_impedance(pp2, 'siemens', za)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":435},"id":"ifxKgAR7t2vV","executionInfo":{"status":"ok","timestamp":1680129406348,"user_tz":300,"elapsed":638,"user":{"displayName":"Dario Andres Acero Guerrero","userId":"01381320682675421971"}},"outputId":"e14905de-cb74-423c-d1fd-f80dff822dc7"},"execution_count":83,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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G62JqHkwAFGL0el0aNeuHZxOJ1wul7+rQ0FCrVZDo9GwxZCImhUDELUoSZKg1Wobvf0DERGRL7E9mYiIiEIOAxARERGFHAYgIiIiCjkMQERERBRyGICIiIgo5DAAERERUchhACIiIqKQwwBEREREIYcBiIiIiEIOAxARERGFHAYgIiIiCjkMQERERBRyGICIiIgo5DAAERERUchhACIiIqKQwwBEREREIcdvAWj9+vWQJMnr48cffwQAHDp0yOv2LVu2+KvaRERE1Apo/PXGgwcPRlFRkWLdiy++iLVr1+Kaa65RrF+zZg169eolL8fFxbVIHYmIiKh18lsA0ul0SE5OlpcdDgc+++wz/OUvf4EkSYqycXFxirJERERElyNg+gB9/vnnOH36NB544AGPbXfccQcSExNxww034PPPP290XzabDRUVFYoHERERUY2ACUC5ublIT09H27Zt5XXh4eH4+9//jhUrVuCrr77CDTfcgFGjRjUagrKzsxEVFSU/UlNTfV19IiIiCiKSEEI05w6fe+45zJ49u8Eye/bsQffu3eXlY8eOoX379li+fDnGjBnT4Gvvu+8+HDx4EBs3bqy3jM1mg81mk5crKiqQmpqK8vJyREZGNvFIiIiIyJ8qKioQFRXlk/N3s/cBmjJlCsaPH99gmU6dOimW8/LyEBcXhzvuuKPR/Q8cOBCrV69usIxer4der290X0RERBSamj0AJSQkICEhocnlhRDIy8vDfffdB61W22j5goICpKSkXE4ViYiIKMT5bRRYje+++w4HDx7EQw895LFt8eLF0Ol0uOqqqwAAn376KRYuXIj333+/patJRERErYjfA1Bubi4GDx6s6BNU20svvYTDhw9Do9Gge/fuWLZsGe68884WriURERG1Js3eCToQ+bITFREREfmGL8/fATMMnoiIiKilMAARERFRyGEAIiIiopDDAEREREQhhwGIiIiIQg4DEBEREYUcBiAiIiIKOQxAREREFHIYgIiIiCjkMAARERFRyGEAIiIiopDDAEREREQhhwGIiIiIQg4DEBEREYUcBiAiIiIKOQxAREREFHIYgIiIiCjkMAARERFRyGEAIiIiopDDAEREREQhhwGIiIiIQg4DEBEREYUcBiAiIiIKOQxAREREFHIYgIiIiCjkMAARERFRyGEAIiIiopDDAEREREQhhwGIiIiIQg4DEBEREYUcBiAiIiIKOQxAREREFHIYgIiIiCjkMAARERFRyGEAIiIiopDDAEREREQhx2cB6OWXX8bgwYNhMpkQHR3ttcyRI0cwYsQImEwmJCYm4plnnoHT6VSUWb9+Pa6++mro9Xp06dIFixYt8lWViYiIKET4LADZ7XbcddddePTRR71ud7lcGDFiBOx2OzZv3ozFixdj0aJFmDZtmlzm4MGDGDFiBG688UYUFBTgySefxEMPPYRvvvnGV9UmIiKiECAJIYQv32DRokV48sknUVZWplj/73//GyNHjsSJEyeQlJQEAHj33XcxdepUnDx5EjqdDlOnTsVXX32FXbt2ya+75557UFZWhlWrVtX7njabDTabTV4uLy9Hu3btcPToUURGRjbvARIREZFPVFRUIDU1FWVlZYiKimrWfWuadW8XIT8/H3369JHDDwCkp6fj0Ucfxe7du3HVVVchPz8faWlpitelp6fjySefbHDf2dnZmDlzpsf61NTUZqk7ERERtZzTp0+3ngBUXFysCD8A5OXi4uIGy1RUVMBiscBoNHrdd1ZWFiZPniwvl5WVoX379jhy5Eiz/wUGsprkHGotXzxuHnco4HHzuENBzRWc2NjYZt/3RQWg5557DrNnz26wzJ49e9C9e/fLqtTl0uv10Ov1HuujoqJC6otTIzIykscdQnjcoYXHHVpC9bhVqubvsnxRAWjKlCkYP358g2U6derUpH0lJydj27ZtinUlJSXytpo/a9bVLhMZGVlv6w8RERFRYy4qACUkJCAhIaFZ3njQoEF4+eWXUVpaisTERADA6tWrERkZiZ49e8plvv76a8XrVq9ejUGDBjVLHYiIiCg0+WwY/JEjR1BQUIAjR47A5XKhoKAABQUFOH/+PADg1ltvRc+ePTFu3Djs2LED33zzDV544QU89thj8uWrSZMm4bfffsOzzz6LvXv34u2338by5cvx1FNPXVRd9Ho9pk+f7vWyWGvG4+ZxhwIeN487FPC4m/+4fTYMfvz48Vi8eLHH+nXr1mH48OEAgMOHD+PRRx/F+vXrERYWhvvvvx85OTnQaC40TK1fvx5PPfUUCgsL0bZtW7z44ouNXoYjIiIiaojP5wEiIiIiCjS8FxgRERGFHAYgIiIiCjkMQERERBRyGICIiIgo5LSqAPTyyy9j8ODBMJlMiI6O9lrm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\n"},"metadata":{}}]}]}